// Generated by gencpp from file vision_no_ros/vector_msg.msg
// DO NOT EDIT!


#ifndef VISION_NO_ROS_MESSAGE_VECTOR_MSG_H
#define VISION_NO_ROS_MESSAGE_VECTOR_MSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace vision_no_ros
{
template <class ContainerAllocator>
struct vector_msg_
{
  typedef vector_msg_<ContainerAllocator> Type;

  vector_msg_()
    : id(0)
    , reliability(0)
    , x_pos(0)
    , y_pos(0)
    , z_pos(0)
    , x_rot(0)
    , y_rot(0)
    , z_rot(0)  {
    }
  vector_msg_(const ContainerAllocator& _alloc)
    : id(0)
    , reliability(0)
    , x_pos(0)
    , y_pos(0)
    , z_pos(0)
    , x_rot(0)
    , y_rot(0)
    , z_rot(0)  {
  (void)_alloc;
    }



   typedef int16_t _id_type;
  _id_type id;

   typedef int8_t _reliability_type;
  _reliability_type reliability;

   typedef int16_t _x_pos_type;
  _x_pos_type x_pos;

   typedef int16_t _y_pos_type;
  _y_pos_type y_pos;

   typedef int16_t _z_pos_type;
  _z_pos_type z_pos;

   typedef int16_t _x_rot_type;
  _x_rot_type x_rot;

   typedef int16_t _y_rot_type;
  _y_rot_type y_rot;

   typedef int16_t _z_rot_type;
  _z_rot_type z_rot;





  typedef boost::shared_ptr< ::vision_no_ros::vector_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vision_no_ros::vector_msg_<ContainerAllocator> const> ConstPtr;

}; // struct vector_msg_

typedef ::vision_no_ros::vector_msg_<std::allocator<void> > vector_msg;

typedef boost::shared_ptr< ::vision_no_ros::vector_msg > vector_msgPtr;
typedef boost::shared_ptr< ::vision_no_ros::vector_msg const> vector_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::vision_no_ros::vector_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::vision_no_ros::vector_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::vision_no_ros::vector_msg_<ContainerAllocator1> & lhs, const ::vision_no_ros::vector_msg_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.reliability == rhs.reliability &&
    lhs.x_pos == rhs.x_pos &&
    lhs.y_pos == rhs.y_pos &&
    lhs.z_pos == rhs.z_pos &&
    lhs.x_rot == rhs.x_rot &&
    lhs.y_rot == rhs.y_rot &&
    lhs.z_rot == rhs.z_rot;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::vision_no_ros::vector_msg_<ContainerAllocator1> & lhs, const ::vision_no_ros::vector_msg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace vision_no_ros

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::vision_no_ros::vector_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vision_no_ros::vector_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vision_no_ros::vector_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vision_no_ros::vector_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vision_no_ros::vector_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vision_no_ros::vector_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::vision_no_ros::vector_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5293413431842928eb9de0ce34594eab";
  }

  static const char* value(const ::vision_no_ros::vector_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5293413431842928ULL;
  static const uint64_t static_value2 = 0xeb9de0ce34594eabULL;
};

template<class ContainerAllocator>
struct DataType< ::vision_no_ros::vector_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vision_no_ros/vector_msg";
  }

  static const char* value(const ::vision_no_ros::vector_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::vision_no_ros::vector_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 id\n"
"int8 reliability\n"
"int16 x_pos\n"
"int16 y_pos\n"
"int16 z_pos\n"
"int16 x_rot\n"
"int16 y_rot\n"
"int16 z_rot\n"
;
  }

  static const char* value(const ::vision_no_ros::vector_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::vision_no_ros::vector_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.reliability);
      stream.next(m.x_pos);
      stream.next(m.y_pos);
      stream.next(m.z_pos);
      stream.next(m.x_rot);
      stream.next(m.y_rot);
      stream.next(m.z_rot);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct vector_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vision_no_ros::vector_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::vision_no_ros::vector_msg_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<int16_t>::stream(s, indent + "  ", v.id);
    s << indent << "reliability: ";
    Printer<int8_t>::stream(s, indent + "  ", v.reliability);
    s << indent << "x_pos: ";
    Printer<int16_t>::stream(s, indent + "  ", v.x_pos);
    s << indent << "y_pos: ";
    Printer<int16_t>::stream(s, indent + "  ", v.y_pos);
    s << indent << "z_pos: ";
    Printer<int16_t>::stream(s, indent + "  ", v.z_pos);
    s << indent << "x_rot: ";
    Printer<int16_t>::stream(s, indent + "  ", v.x_rot);
    s << indent << "y_rot: ";
    Printer<int16_t>::stream(s, indent + "  ", v.y_rot);
    s << indent << "z_rot: ";
    Printer<int16_t>::stream(s, indent + "  ", v.z_rot);
  }
};

} // namespace message_operations
} // namespace ros

#endif // VISION_NO_ROS_MESSAGE_VECTOR_MSG_H
