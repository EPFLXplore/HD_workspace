// Generated by gencpp from file controller_motors/WheelVelocity.msg
// DO NOT EDIT!


#ifndef CONTROLLER_MOTORS_MESSAGE_WHEELVELOCITY_H
#define CONTROLLER_MOTORS_MESSAGE_WHEELVELOCITY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace controller_motors
{
template <class ContainerAllocator>
struct WheelVelocity_
{
  typedef WheelVelocity_<ContainerAllocator> Type;

  WheelVelocity_()
    : motor_L_1(0.0)
    , motor_L_2(0.0)
    , motor_L_3(0.0)
    , motor_R_1(0.0)
    , motor_R_2(0.0)
    , motor_R_3(0.0)  {
    }
  WheelVelocity_(const ContainerAllocator& _alloc)
    : motor_L_1(0.0)
    , motor_L_2(0.0)
    , motor_L_3(0.0)
    , motor_R_1(0.0)
    , motor_R_2(0.0)
    , motor_R_3(0.0)  {
  (void)_alloc;
    }



   typedef float _motor_L_1_type;
  _motor_L_1_type motor_L_1;

   typedef float _motor_L_2_type;
  _motor_L_2_type motor_L_2;

   typedef float _motor_L_3_type;
  _motor_L_3_type motor_L_3;

   typedef float _motor_R_1_type;
  _motor_R_1_type motor_R_1;

   typedef float _motor_R_2_type;
  _motor_R_2_type motor_R_2;

   typedef float _motor_R_3_type;
  _motor_R_3_type motor_R_3;





  typedef boost::shared_ptr< ::controller_motors::WheelVelocity_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::controller_motors::WheelVelocity_<ContainerAllocator> const> ConstPtr;

}; // struct WheelVelocity_

typedef ::controller_motors::WheelVelocity_<std::allocator<void> > WheelVelocity;

typedef boost::shared_ptr< ::controller_motors::WheelVelocity > WheelVelocityPtr;
typedef boost::shared_ptr< ::controller_motors::WheelVelocity const> WheelVelocityConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::controller_motors::WheelVelocity_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::controller_motors::WheelVelocity_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::controller_motors::WheelVelocity_<ContainerAllocator1> & lhs, const ::controller_motors::WheelVelocity_<ContainerAllocator2> & rhs)
{
  return lhs.motor_L_1 == rhs.motor_L_1 &&
    lhs.motor_L_2 == rhs.motor_L_2 &&
    lhs.motor_L_3 == rhs.motor_L_3 &&
    lhs.motor_R_1 == rhs.motor_R_1 &&
    lhs.motor_R_2 == rhs.motor_R_2 &&
    lhs.motor_R_3 == rhs.motor_R_3;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::controller_motors::WheelVelocity_<ContainerAllocator1> & lhs, const ::controller_motors::WheelVelocity_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace controller_motors

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::controller_motors::WheelVelocity_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::controller_motors::WheelVelocity_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::controller_motors::WheelVelocity_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::controller_motors::WheelVelocity_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::controller_motors::WheelVelocity_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::controller_motors::WheelVelocity_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::controller_motors::WheelVelocity_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2100effca439a60b87f35d4c3f8f6847";
  }

  static const char* value(const ::controller_motors::WheelVelocity_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2100effca439a60bULL;
  static const uint64_t static_value2 = 0x87f35d4c3f8f6847ULL;
};

template<class ContainerAllocator>
struct DataType< ::controller_motors::WheelVelocity_<ContainerAllocator> >
{
  static const char* value()
  {
    return "controller_motors/WheelVelocity";
  }

  static const char* value(const ::controller_motors::WheelVelocity_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::controller_motors::WheelVelocity_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 motor_L_1\n"
"float32 motor_L_2\n"
"float32 motor_L_3\n"
"float32 motor_R_1\n"
"float32 motor_R_2\n"
"float32 motor_R_3\n"
;
  }

  static const char* value(const ::controller_motors::WheelVelocity_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::controller_motors::WheelVelocity_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.motor_L_1);
      stream.next(m.motor_L_2);
      stream.next(m.motor_L_3);
      stream.next(m.motor_R_1);
      stream.next(m.motor_R_2);
      stream.next(m.motor_R_3);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct WheelVelocity_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::controller_motors::WheelVelocity_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::controller_motors::WheelVelocity_<ContainerAllocator>& v)
  {
    s << indent << "motor_L_1: ";
    Printer<float>::stream(s, indent + "  ", v.motor_L_1);
    s << indent << "motor_L_2: ";
    Printer<float>::stream(s, indent + "  ", v.motor_L_2);
    s << indent << "motor_L_3: ";
    Printer<float>::stream(s, indent + "  ", v.motor_L_3);
    s << indent << "motor_R_1: ";
    Printer<float>::stream(s, indent + "  ", v.motor_R_1);
    s << indent << "motor_R_2: ";
    Printer<float>::stream(s, indent + "  ", v.motor_R_2);
    s << indent << "motor_R_3: ";
    Printer<float>::stream(s, indent + "  ", v.motor_R_3);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CONTROLLER_MOTORS_MESSAGE_WHEELVELOCITY_H
