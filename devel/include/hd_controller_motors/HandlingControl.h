// Generated by gencpp from file hd_controller_motors/HandlingControl.msg
// DO NOT EDIT!


#ifndef HD_CONTROLLER_MOTORS_MESSAGE_HANDLINGCONTROL_H
#define HD_CONTROLLER_MOTORS_MESSAGE_HANDLINGCONTROL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace hd_controller_motors
{
template <class ContainerAllocator>
struct HandlingControl_
{
  typedef HandlingControl_<ContainerAllocator> Type;

  HandlingControl_()
    : mode(false)
    , active()  {
      active.assign(0);
  }
  HandlingControl_(const ContainerAllocator& _alloc)
    : mode(false)
    , active()  {
  (void)_alloc;
      active.assign(0);
  }



   typedef uint8_t _mode_type;
  _mode_type mode;

   typedef boost::array<int8_t, 7>  _active_type;
  _active_type active;





  typedef boost::shared_ptr< ::hd_controller_motors::HandlingControl_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hd_controller_motors::HandlingControl_<ContainerAllocator> const> ConstPtr;

}; // struct HandlingControl_

typedef ::hd_controller_motors::HandlingControl_<std::allocator<void> > HandlingControl;

typedef boost::shared_ptr< ::hd_controller_motors::HandlingControl > HandlingControlPtr;
typedef boost::shared_ptr< ::hd_controller_motors::HandlingControl const> HandlingControlConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hd_controller_motors::HandlingControl_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hd_controller_motors::HandlingControl_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::hd_controller_motors::HandlingControl_<ContainerAllocator1> & lhs, const ::hd_controller_motors::HandlingControl_<ContainerAllocator2> & rhs)
{
  return lhs.mode == rhs.mode &&
    lhs.active == rhs.active;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::hd_controller_motors::HandlingControl_<ContainerAllocator1> & lhs, const ::hd_controller_motors::HandlingControl_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace hd_controller_motors

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::hd_controller_motors::HandlingControl_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hd_controller_motors::HandlingControl_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hd_controller_motors::HandlingControl_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hd_controller_motors::HandlingControl_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hd_controller_motors::HandlingControl_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hd_controller_motors::HandlingControl_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hd_controller_motors::HandlingControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9d442959eb4fb33de16d25940179fe7d";
  }

  static const char* value(const ::hd_controller_motors::HandlingControl_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9d442959eb4fb33dULL;
  static const uint64_t static_value2 = 0xe16d25940179fe7dULL;
};

template<class ContainerAllocator>
struct DataType< ::hd_controller_motors::HandlingControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hd_controller_motors/HandlingControl";
  }

  static const char* value(const ::hd_controller_motors::HandlingControl_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hd_controller_motors::HandlingControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool mode\n"
"int8[7] active\n"
;
  }

  static const char* value(const ::hd_controller_motors::HandlingControl_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hd_controller_motors::HandlingControl_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.mode);
      stream.next(m.active);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct HandlingControl_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hd_controller_motors::HandlingControl_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hd_controller_motors::HandlingControl_<ContainerAllocator>& v)
  {
    s << indent << "mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mode);
    s << indent << "active[]" << std::endl;
    for (size_t i = 0; i < v.active.size(); ++i)
    {
      s << indent << "  active[" << i << "]: ";
      Printer<int8_t>::stream(s, indent + "  ", v.active[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // HD_CONTROLLER_MOTORS_MESSAGE_HANDLINGCONTROL_H
